# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
def update_damage(lst):
  new_lst=[]
  for i in lst:
    if i != 'Damages not recorded':
      if i[-1] == 'B':
        i=1000000000 * float(i.strip('B'))
      elif i[-1] == 'M':
        i=1000000*float(i.strip('M'))   
    new_lst.append(i)
  return new_lst
# test function by updating damages
damages=update_damage(damages)
#print(damages)
# 2 
# Create a Table

#Lukas--> Was meinen die mit create a Table

# Create and view the hurricanes dictionary
def create_dic(name, month, year, sus, area, damage, death):
  dic={}
  for i in range(len(name)):
    dic[name[i]]={'Name': name[i], 'Month': month[i], 'Year': year[i], 'Max Sustained Wind': sus[i], 'Areas Affected': area[i], 'Damage': damage[i], 'Deaths': death[i]}
  return dic

#Lukas--> Könnte man das eventuell so organisieren, dass es für egal wie große Mengen einfach geht? Ich dachte im ersten Moment an ne List, wusste aber nicht wie..

org_dic=create_dic(names, months, years, max_sustained_winds, areas_affected, damages, deaths)
#print(org_dic)
# 3
# Organizing by Year

# create a new dictionary of hurricanes with year and key

def by_year(dic):
  new_dic={}
  for i in dic.values():
    year=i.get('Year')
    try:
      new_dic[year]=[new_dic[year], i]
    except KeyError:
      new_dic[year]=i
  return new_dic
#Lukas --> Hast du nochwas eingefügt um das dict aufsteigend nach den Jahren zu sortieren?
#print(by_year(org_dic).get(1932))


# 4
# Counting Damaged Areas

# create dictionary of areas to store the number of hurricanes involved in
def areas_count(dic):
  area_dic={}
  for i in dic.values():
    area_lst=i.get('Areas Affected')
    for area in area_lst:
      try:
        area_dic[area]+=1
      except KeyError:
        area_dic[area]=1
  return area_dic

#print(areas_count(org_dic))
areacount=areas_count(org_dic)
# 5 
# Calculating Maximum Hurricane Count

# find most frequently affected area and the number of hurricanes involved in

def most_affected(dic):
  areamax=float('-inf')
  countmax=float('-inf')
  for i in dic.keys():
    if dic.get(i) > countmax:
      areamax=i
      countmax=dic.get(i)
    return areamax, countmax

#print(most_affected(areacount))


# 6
# Calculating the Deadliest Hurricane

def mortality(names, deaths):
  max_kills=float('-inf')
  max_name=float('-inf')
  for i in range(len(names)):
    if deaths[i]>max_kills:
      max_kills=deaths[i]
      max_name=names[i]
  return max_kills, max_name

#print(mortality(names, deaths))

# find highest mortality hurricane and the number of deaths

# 7
# Rating Hurricanes by Mortality
mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}
def dic_by_mort(dic):
  new_dic={0:[], 1:[], 2:[], 3:[], 4:[]}
  for i in dic.keys():
    if dic[i].get('Deaths')<100:
      new_dic[0].append(dic[i])
    if dic[i].get('Deaths')<500:
      new_dic[1].append(dic[i])
    if dic[i].get('Deaths')<1000:
      new_dic[2].append(dic[i])
    if dic[i].get('Deaths')<10000:
      new_dic[3].append(dic[i])
    if dic[i].get('Deaths')>=10000:
      new_dic[4].append(dic[i])
  return new_dic
#print(dic_by_mort(org_dic))
#Lukas --> Hier wusste ich nicht welches dic ich in die Liste einfügen sollte also hab ich mal alles reingekracht. Auch hier wäre spannend ob du einen Ansatz gewählt hast der weniger Fleißarbeit, mehr Automatisierung ist?

# categorize hurricanes in new dictionary with mortality severity as key


# 8 Calculating Hurricane Maximum Damage
def max_dmg(names, damages):
  max_dmg=float('-inf')
  max_name=float('-inf')
  for i in range(len(names)):
    if damages[i]!='Damages not recorded':
      if damages[i]>max_dmg:
        max_dmg=damages[i]
        max_name=names[i]
  return max_name, max_dmg
    
print(max_dmg(names, damages))
# find highest damage inducing hurricane and its total cost


# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
def dic_by_dmg(dic):
  new_dic={0:[], 1:[], 2:[], 3:[], 4:[]}
  for i in dic.keys():
    if dic[i].get('Damage')!='Damages not recorded':
      if dic[i].get('Damage')<100000000:
        new_dic[0].append(dic[i])
      if dic[i].get('Damage')<1000000000:
        new_dic[1].append(dic[i])
      if dic[i].get('Damage')<10000000000:
        new_dic[2].append(dic[i])
      if dic[i].get('Damage')<50000000000:
        new_dic[3].append(dic[i])
      if dic[i].get('Damage')>=50000000000:
        new_dic[4].append(dic[i])
  return new_dic

print (dic_by_dmg(org_dic))

# categorize hurricanes in new dictionary with damage severity as key
